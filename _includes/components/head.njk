<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#69f0ae">
  <link rel="manifest" href="/manifest.webmanifest">
  <title>{{ title or renderData.title or metadata.title }}</title>
  <script async src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
  {% set css %}
    {% include "assets/css/inline.css" %}
  {% endset %}
  <style>{{ css | cssmin | safe }}</style>
  {% set js %}
    {% include "assets/js/inline.js" %}
  {% endset %}
  <script>{{ js | jsmin | safe }}</script>
  <script src="/static/js/mwc-dist.js" async></script>
  <link href="https://fonts.googleapis.com/css?family=Material+Icons&display=block" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/themes/prism-tomorrow.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/plugins/line-numbers/prism-line-numbers.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/prism.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-typescript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-css.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.19.0/components/prism-csharp.min.js"></script>
  <script>
			// Check that service workers are supported
			if ('serviceWorker' in navigator) {
				// Use the window load event to keep the page load performant
				window.addEventListener('load', () => {
          if (window.BroadcastChannel) {
            const stripString = (input, strip) => {
              if(input.endsWith(strip)) {
                return input.substring(0, input.length - strip.length);
              }

              return input;
            };

            const noAction = (url) => url;
            const stripHtml = (url) => stripString(url, '.html');
            const stripIndex = (url) => stripString(url, 'index');

            const mutations = [noAction, stripHtml, stripIndex];

            const updateChannel = new window.BroadcastChannel('precache-updates');
            updateChannel.addEventListener('message', (event) => {
              let updatedUrl = event.data.payload.updatedUrl;
              mutations.forEach((mutationfunc) => {
                updatedUrl = mutationfunc(updatedUrl);
                if (updatedUrl === location.href) {
                  const swUpdates = document.getElementById("swUpdates");
		              if (swUpdates) {
                    swUpdates.show();
                  }
                }
              });
            });
          }
					navigator.serviceWorker.register('/service-worker.js');
				});
			}
  </script>
</head>
